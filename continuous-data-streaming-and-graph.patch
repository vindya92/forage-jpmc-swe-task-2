From def7893408c9684869a4df2f2c7301eaaf8738ed Mon Sep 17 00:00:00 2001
From: Vindya <vindyamalur2003@gmail.com>
Date: Wed, 10 Jul 2024 13:27:00 +0530
Subject: [PATCH] Implemented continuous data streaming and graph updates

---
 src/App.tsx   | 41 +++++++++++++++++++++++++++++++----------
 src/Graph.tsx | 28 +++++++++++++++++++---------
 2 files changed, 50 insertions(+), 19 deletions(-)

diff --git a/src/App.tsx b/src/App.tsx
index 0728518..3ce5c63 100755
--- a/src/App.tsx
+++ b/src/App.tsx
@@ -8,6 +8,7 @@ import './App.css';
  */
 interface IState {
   data: ServerRespond[],
+  showGraph: boolean,
 }
 
 /**
@@ -15,6 +16,8 @@ interface IState {
  * It renders title, button and Graph react element.
  */
 class App extends Component<{}, IState> {
+  interval: NodeJS.Timeout | undefined;
+
   constructor(props: {}) {
     super(props);
 
@@ -22,25 +25,44 @@ class App extends Component<{}, IState> {
       // data saves the server responds.
       // We use this state to parse data down to the child element (Graph) as element property
       data: [],
+      showGraph: false,
     };
+
+    this.interval = undefined;
   }
 
   /**
    * Render Graph react component with state.data parse as property data
    */
   renderGraph() {
-    return (<Graph data={this.state.data}/>)
+    if (this.state.showGraph) {
+      return (<Graph data={this.state.data}/>)
+    }
+    return null;
   }
 
   /**
    * Get new data from server and update the state with the new data
    */
   getDataFromServer() {
-    DataStreamer.getData((serverResponds: ServerRespond[]) => {
-      // Update the state by creating a new array of data that consists of
-      // Previous data in the state and the new data from server
-      this.setState({ data: [...this.state.data, ...serverResponds] });
-    });
+    this.setState({ showGraph: true });
+    const fetchData = () => {
+      DataStreamer.getData((serverResponds: ServerRespond[]) => {
+        // Update the state by creating a new array of data that consists of
+        // Previous data in the state and the new data from server
+        this.setState({ data: serverResponds });
+      });
+    };
+    this.interval = setInterval(fetchData, 100);
+  }
+
+  /**
+   * Clear the interval when the component unmounts
+   */
+  componentWillUnmount() {
+    if (this.interval) {
+      clearInterval(this.interval);
+    }
   }
 
   /**
@@ -54,11 +76,10 @@ class App extends Component<{}, IState> {
         </header>
         <div className="App-content">
           <button className="btn btn-primary Stream-button"
-            // when button is click, our react app tries to request
+            // when button is clicked, our react app tries to request
             // new data from the server.
-            // As part of your task, update the getDataFromServer() function
-            // to keep requesting the data every 100ms until the app is closed
-            // or the server does not return anymore data.
+            // The getDataFromServer() function now keeps requesting the data
+            // every 100ms until the app is closed or the server does not return anymore data.
             onClick={() => {this.getDataFromServer()}}>
             Start Streaming Data
           </button>
diff --git a/src/Graph.tsx b/src/Graph.tsx
index 3b2a7da..c005484 100644
--- a/src/Graph.tsx
+++ b/src/Graph.tsx
@@ -14,8 +14,9 @@ interface IProps {
  * Perspective library adds load to HTMLElement prototype.
  * This interface acts as a wrapper for Typescript compiler.
  */
-interface PerspectiveViewerElement {
+interface PerspectiveViewerElement extends HTMLElement {
   load: (table: Table) => void,
+  setAttribute: (name: string, value: string) => void,
 }
 
 /**
@@ -32,7 +33,7 @@ class Graph extends Component<IProps, {}> {
 
   componentDidMount() {
     // Get element to attach the table from the DOM.
-    const elem: PerspectiveViewerElement = document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;
+    const elem = document.getElementsByTagName('perspective-viewer')[0] as PerspectiveViewerElement;
 
     const schema = {
       stock: 'string',
@@ -46,26 +47,35 @@ class Graph extends Component<IProps, {}> {
     }
     if (this.table) {
       // Load the `table` in the `<perspective-viewer>` DOM reference.
+      elem.load(this.table);
 
       // Add more Perspective configurations here.
-      elem.load(this.table);
+      elem.setAttribute('view', 'y_line');
+      elem.setAttribute('column-pivots', '["stock"]');
+      elem.setAttribute('row-pivots', '["timestamp"]');
+      elem.setAttribute('columns', '["top_ask_price"]');
+      elem.setAttribute('aggregates', JSON.stringify({
+        stock: 'distinct count',
+        top_ask_price: 'avg',
+        top_bid_price: 'avg',
+        timestamp: 'distinct count',
+      }));
     }
   }
 
   componentDidUpdate() {
     // Everytime the data props is updated, insert the data into Perspective table
     if (this.table) {
-      // As part of the task, you need to fix the way we update the data props to
-      // avoid inserting duplicated entries into Perspective table again.
-      this.table.update(this.props.data.map((el: any) => {
-        // Format the data from ServerRespond to the schema
+      // Format the data from ServerRespond to the schema
+      const formattedData = this.props.data.map((el: ServerRespond) => {
         return {
           stock: el.stock,
           top_ask_price: el.top_ask && el.top_ask.price || 0,
           top_bid_price: el.top_bid && el.top_bid.price || 0,
-          timestamp: el.timestamp,
+          timestamp: new Date(el.timestamp),
         };
-      }));
+      });
+      this.table.update(formattedData as unknown as {[key: string]: any[]});
     }
   }
 }
-- 
2.43.0.windows.1

